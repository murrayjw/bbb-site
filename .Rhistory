fgp= c(team_1_stats[2],
team_2_stats[2]),
ftm_fta= c(team_1_stats[3],
team_2_stats[3]),
ftp= c(team_1_stats[4],
team_2_stats[4]),
fgm3= c(team_1_stats[5],
team_2_stats[5]),
pts= c(team_1_stats[6],
team_2_stats[6]),
rebounds= c(team_1_stats[7],
team_2_stats[7]),
assists= c(team_1_stats[8],
team_2_stats[8]),
steals= c(team_1_stats[9],
team_2_stats[9]),
blocks= c(team_1_stats[10],
team_2_stats[10]),
turnovers= c(team_1_stats[11],
team_2_stats[11])
) %>%
mutate(matchup_id = i,
week = week)
num_vars  <-  suppressWarnings(apply(tmp_teams, 2,
function(x) {
tot_miss <- sum(is.na(as.numeric(x)))
ifelse(tot_miss == length(x), 0, 1)
}))
tmp_teams <- tmp_teams %>%
mutate_at(which(num_vars == 1), as.numeric)
#  calculate winners of each stat -----------------------------------------
winners <- unlist(tmp$stat_winners)
team1_wins <- sum(winners %in% tmp_teams$team_keys[1])
team2_wins <- sum(winners %in% tmp_teams$team_keys[2])
ties <- 9 - (team1_wins + team2_wins)
tmp_teams <- tmp_teams %>%
mutate(wins = c(team1_wins, team2_wins),
losses = c(team2_wins, team1_wins),
ties = ties)
matchup_data[[i]] <- tmp
}
matchup_data
n <- length(matchups) - 1
matchup_data <- list()
for(i in 1:n) {
tmp <- matchups[[i]]
team_1_stats <- purrr::map_chr(tmp$teams[[1]]$team_stats$stats, "value")
team_2_stats <- purrr::map_chr(tmp$teams[[2]]$team_stats$stats, "value")
tmp_teams <- tibble(
team_ids = c(tmp$teams[[1]]$team_id,
tmp$teams[[2]]$team_id),
team_keys = c(tmp$teams[[1]]$team_key,
tmp$teams[[2]]$team_key),
team_name= c(tmp$teams[[1]]$name,
tmp$teams[[2]]$name),
completed_games = c(tmp$teams[[1]]$team_remaining_games$total$completed_games,
tmp$teams[[2]]$team_remaining_games$total$completed_games),
remaining_games = c(tmp$teams[[1]]$team_remaining_games$total$remaining_games,
tmp$teams[[2]]$team_remaining_games$total$remaining_games),
fgm_fga= c(team_1_stats[1],
team_2_stats[1]),
fgp= c(team_1_stats[2],
team_2_stats[2]),
ftm_fta= c(team_1_stats[3],
team_2_stats[3]),
ftp= c(team_1_stats[4],
team_2_stats[4]),
fgm3= c(team_1_stats[5],
team_2_stats[5]),
pts= c(team_1_stats[6],
team_2_stats[6]),
rebounds= c(team_1_stats[7],
team_2_stats[7]),
assists= c(team_1_stats[8],
team_2_stats[8]),
steals= c(team_1_stats[9],
team_2_stats[9]),
blocks= c(team_1_stats[10],
team_2_stats[10]),
turnovers= c(team_1_stats[11],
team_2_stats[11])
) %>%
mutate(matchup_id = i,
week = week)
num_vars  <-  suppressWarnings(apply(tmp_teams, 2,
function(x) {
tot_miss <- sum(is.na(as.numeric(x)))
ifelse(tot_miss == length(x), 0, 1)
}))
tmp_teams <- tmp_teams %>%
mutate_at(which(num_vars == 1), as.numeric)
#  calculate winners of each stat -----------------------------------------
winners <- unlist(tmp$stat_winners)
team1_wins <- sum(winners %in% tmp_teams$team_keys[1])
team2_wins <- sum(winners %in% tmp_teams$team_keys[2])
ties <- 9 - (team1_wins + team2_wins)
tmp_teams <- tmp_teams %>%
mutate(wins = c(team1_wins, team2_wins),
losses = c(team2_wins, team1_wins),
ties = ties)
matchup_data[[i]] <- tmp_teams
}
matchup_data
matchup_data <- do.call(rbind, matchup_data)
detach("package:fantasyHelp", unload = TRUE)
library(fantasyHelp)
detach("package:fantasyHelp", unload = TRUE)
library(fantasyHelp)
current_week <- get_current_week()
current_week <- get_current_week()
current_week
matchup_data <- list()
for(i in weeks) {
matchup_data[[i]] <- get_matchup_results(week = i)
}
weeks <- 1:current_week
matchup_data <- list()
for(i in weeks) {
matchup_data[[i]] <- get_matchup_results(week = i)
}
all_matchup_data <- do.call(rbind, matchup_data)
# save list
save(matchup_data, file = here::here('site_content', 'data', 'matchup_data.Rda'))
# save binded list data
save(all_matchup_data, file = here::here('site_content', 'data', 'all_matchup_data.Rda'))
matchup_data
load(here::here('site_content', 'data', 'matchup_data.Rda'))
load(here::here('site_content', 'data', 'standings.Rda'))
n <- length(matchup_data)
n
matchup_data <- matchup_data[[n]]
match_ids <- unique(matchup_data$matchup_id)
matchup_data
matchup_data %>% filter(matchup_id == 1)
standings <- standings %>%
select(team_id, url)
matchup_data <- matchup_data %>%
left_join(standings, by = "team_id") %>%
select(manager, team_logos, everything())
matchup_data
matchup_data <- matchup_data %>%
left_join(standings, by = c("team_ids" = "team_id")) %>%
select(manager, team_logos, everything()) %>%
select(-team_keys)
matchup_data <- matchup_data %>%
left_join(standings, by = c("team_ids" = "team_id")) %>%
select(-team_ids, team_logos, team_name, everything()) %>%
select(-team_keys)
load(here::here('site_content', 'data', 'standings.Rda'))
standings <- standings %>%
select(team_id, url, team_logos)
matchup_data <- matchup_data %>%
left_join(standings, by = c("team_ids" = "team_id")) %>%
select(-team_ids, team_logos, team_name, everything()) %>%
select(-team_keys)
matchup_data
load(here::here('site_content', 'data', 'matchup_data.Rda'))
load(here::here('site_content', 'data', 'standings.Rda'))
n <- length(matchup_data)
matchup_data <- matchup_data[[n]]
match_ids <- unique(matchup_data$matchup_id)
standings <- standings %>%
select(team_id, url, team_logos)
matchup_data <- matchup_data %>%
left_join(standings, by = c("team_ids" = "team_id")) %>%
select(team_logos, team_name, everything()) %>%
select(-team_ids, -team_keys)
matchup_data
matchup_data
data = matchup_data
id = 1
mid = 1
tmp <- data %>%
filter(matchup_id == mid)
tmp
load(here::here('site_content', 'data', 'standings.Rda'))
standings
load(here::here('site_content', 'data', 'matchup_data.Rda'))
load(here::here('site_content', 'data', 'standings.Rda'))
n <- length(matchup_data)
matchup_data <- matchup_data[[n]]
match_ids <- unique(matchup_data$matchup_id)
standings <- standings %>%
mutate(record = paste0(wins, "-", losses, "-", ties))
select(team_id, url, team_logos, record)
standings <- standings %>%
mutate(record = paste0(wins, "-", losses, "-", ties)) %>%
select(team_id, url, team_logos, record)
standings <- standings %>%
mutate(record = paste0(wins, "-", losses, "-", ties)) %>%
select(team_id, url, team_logos, record)
matchup_data <- matchup_data %>%
left_join(standings, by = c("team_ids" = "team_id")) %>%
select(team_logos, team_name, everything()) %>%
select(-team_ids, -team_keys)
matchup_data
data
names(tmp)
?colDef
load(here::here('site_content', 'data', 'team_stats.Rda'))
get_standings()
save(team_ids, file = here::here('site_content', 'data', 'team_ids.Rda'))
team_ids
team_ids <- standings %>%
select(team_id, manager, name, url, team_logos)
save(team_ids, file = here::here('site_content', 'data', 'team_ids.Rda'))
standings
standings <- get_standings()
team_ids <- standings %>%
select(team_id, manager, name, url, team_logos)
team_ids
save(team_ids, file = here::here('site_content', 'data', 'team_ids.Rda'))
load(here::here('site_content', 'data', 'team_ids.Rda'))
list.files(here::here('site_content', 'data'))
tid <- 1
library(dplyr)
library(reactable)
load(here::here('site_content', 'data', 'team_ids.Rda'))
load(here::here('site_content', 'data', 'rosters.Rda'))
load(here::here('site_content', 'data', 'player_stats.Rda'))
team <- team_ids %>%
filter(team_id == tid)
roster <- rosters[[tid]]
player_stats
load(here::here('site_content', 'data', 'all_player_stats.Rda'))
roster
player_stats <- all_player_stats %>%
filter(player_keys %in% roster$player_key)
player_stats
roster
player_stats %>% head %>% as.data.frame()
tid <- 1
library(dplyr)
library(reactable)
tid <- 1
load(here::here('site_content', 'data', 'team_ids.Rda'))
load(here::here('site_content', 'data', 'rosters.Rda'))
load(here::here('site_content', 'data', 'all_player_stats.Rda'))
team <- team_ids %>%
filter(team_id == tid)
roster <- rosters[[tid]]
player_stats <- all_player_stats %>%
filter(player_keys %in% roster$player_key)
player_stats
reactable(player_stats,
defaultColDef = colDef(
sortNALast = TRUE,
minWidth = 45,
class = JS("function(rowInfo, colInfo, state) {
// Highlight sorted columns
for (var i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === colInfo.id) {
return 'sorted'
}
}
}"),
headerClass = "box-score-header",
),
columns = list(
player_key = colDef(show =F),
player_id = colDef(show=F),
url = colDef(show=F),
player_name = colDef(
name = "",
align = "left",
minWidth = 250,
cell = function(value, index) {
team_name <- value
team_record <- line_score[index, "player_elible"]
tagList(team_name,
span(class = "team-record", team_record)
)}),
player_headshot = colDef(cell = function(value) {
image <- img(src = value, height = "24px", alt = value)
tagList(
div(style = list(display = "inline-block", width = "24px"), image)
)
},
width = 30,
name = ""
),
player_team = colDef(
name = "TEAM",  width = 80),
fga_fgm = colDef(show=F),
ftm_fta = colDef(show=F),
fgp = colDef(name = 'FG%',
format = colFormat(percent = TRUE, digits = 1),
width = 55),
ftp = colDef(name = 'FT%',
format = colFormat(percent = TRUE, digits = 1),
width = 55),
fg3m = colDef(name="3PTM", width = 55),
pts = colDef(name="PTS", width = 55),
rebounds = colDef(name="REB", width = 55),
assists = colDef(name="AST", width = 55),
steals = colDef(name="ST", width = 55),
blocks = colDef(name="BLK", width = 55),
turnovers = colDef(name="TO", width = 55),
fgm = colDef(show=F),
fga = colDef(show=F),
ftm = colDef(show=F),
fta = colDef(show=F),
url= colDef(show=F)
),
showSortIcon = FALSE,
highlight = TRUE,
striped = TRUE,
class = "box-score-tbl",
defaultPageSize = 14,
height = 750,
fullWidth=F, selection = NULL)
reactable(player_stats,
defaultColDef = colDef(
sortNALast = TRUE,
minWidth = 45,
class = JS("function(rowInfo, colInfo, state) {
// Highlight sorted columns
for (var i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === colInfo.id) {
return 'sorted'
}
}
}"),
headerClass = "box-score-header",
),
columns = list(
player_key = colDef(show =F),
player_id = colDef(show=F),
url = colDef(show=F),
player_name = colDef(
name = "",
align = "left",
minWidth = 250,
cell = function(value, index) {
team_name <- value
team_record <- player_stats[index, "player_elible"]
tagList(team_name,
span(class = "team-record", team_record)
)}),
player_headshot = colDef(cell = function(value) {
image <- img(src = value, height = "24px", alt = value)
tagList(
div(style = list(display = "inline-block", width = "24px"), image)
)
},
width = 30,
name = ""
),
player_team = colDef(
name = "TEAM",  width = 80),
fga_fgm = colDef(show=F),
ftm_fta = colDef(show=F),
fgp = colDef(name = 'FG%',
format = colFormat(percent = TRUE, digits = 1),
width = 55),
ftp = colDef(name = 'FT%',
format = colFormat(percent = TRUE, digits = 1),
width = 55),
fg3m = colDef(name="3PTM", width = 55),
pts = colDef(name="PTS", width = 55),
rebounds = colDef(name="REB", width = 55),
assists = colDef(name="AST", width = 55),
steals = colDef(name="ST", width = 55),
blocks = colDef(name="BLK", width = 55),
turnovers = colDef(name="TO", width = 55),
fgm = colDef(show=F),
fga = colDef(show=F),
ftm = colDef(show=F),
fta = colDef(show=F),
url= colDef(show=F)
),
showSortIcon = FALSE,
highlight = TRUE,
striped = TRUE,
class = "box-score-tbl",
defaultPageSize = 14,
height = 750,
fullWidth=F, selection = NULL)
player_stats
player_stats %>% head %>% as.data.frame()
library(reactable)
library(dplyr)
tid <- 1
load(here::here('site_content', 'data', 'team_ids.Rda'))
load(here::here('site_content', 'data', 'rosters.Rda'))
load(here::here('site_content', 'data', 'all_player_stats.Rda'))
team <- team_ids %>%
dplyr::filter(team_id == tid)
roster <- rosters[[tid]]
player_stats <- all_player_stats %>%
dplyr::filter(player_keys %in% roster$player_key)
library(reactable)
library(dplyr)
tid <- 1
load(here::here('site_content', 'data', 'team_ids.Rda'))
load(here::here('site_content', 'data', 'rosters.Rda'))
load(here::here('site_content', 'data', 'all_player_stats.Rda'))
team <- team_ids %>%
dplyr::filter(team_id == tid)
roster <- rosters[[tid]]
player_stats <- all_player_stats %>%
dplyr::filter(player_key %in% roster$player_key)
reactable(player_stats,
defaultColDef = colDef(
sortNALast = TRUE,
minWidth = 45,
class = JS("function(rowInfo, colInfo, state) {
// Highlight sorted columns
for (var i = 0; i < state.sorted.length; i++) {
if (state.sorted[i].id === colInfo.id) {
return 'sorted'
}
}
}"),
headerClass = "box-score-header",
),
columns = list(
player_key = colDef(show =F),
player_id = colDef(show=F),
url = colDef(show=F),
player_name = colDef(
name = "",
align = "left",
minWidth = 250,
cell = function(value, index) {
team_name <- value
team_record <- player_stats[index, "player_elible"]
tagList(team_name,
span(class = "team-record", team_record)
)}),
player_headshot = colDef(cell = function(value) {
image <- img(src = value, height = "24px", alt = value)
tagList(
div(style = list(display = "inline-block", width = "24px"), image)
)
},
width = 30,
name = ""
),
player_team = colDef(
name = "TEAM",  width = 80),
fga_fgm = colDef(show=F),
ftm_fta = colDef(show=F),
fgp = colDef(name = 'FG%',
format = colFormat(percent = TRUE, digits = 1),
width = 55),
ftp = colDef(name = 'FT%',
format = colFormat(percent = TRUE, digits = 1),
width = 55),
fg3m = colDef(name="3PTM", width = 55),
pts = colDef(name="PTS", width = 55),
rebounds = colDef(name="REB", width = 55),
assists = colDef(name="AST", width = 55),
steals = colDef(name="ST", width = 55),
blocks = colDef(name="BLK", width = 55),
turnovers = colDef(name="TO", width = 55),
fgm = colDef(show=F),
fga = colDef(show=F),
ftm = colDef(show=F),
fta = colDef(show=F),
player_position= colDef(show=F)
),
showSortIcon = FALSE,
highlight = TRUE,
striped = TRUE,
class = "box-score-tbl",
defaultPageSize = 14,
height = 750,
fullWidth=F, selection = NULL)
library(htmltools)
player_stats
htmltools::tagList(p(player_stats$team_name[1]),
span(class = "team-record", player_stats$team_record[1])
)
htmltools::tagList(p(player_stats$player_name[1]),
span(class = "team-record", player_stats$player_elible[1])
)
tags$p
htmltools::tagList(player_name,
span(class = "team-record", player_eligible)
)
htmltools::tagList('player_name',
span(class = "team-record", 'player_eligible')
)
player_stats$player_elible
player_stats[1, "player_elible"]
class(player_stats)
str(player_stats)
attributes(player_stats) <- NULL
player_stats
load(here::here('site_content', 'data', 'team_ids.Rda'))
load(here::here('site_content', 'data', 'rosters.Rda'))
team <- team_ids %>%
dplyr::filter(team_id == tid)
roster <- rosters[[tid]]
player_stats <- all_player_stats %>%
dplyr::filter(player_key %in% roster$player_key) %>%
select(player_name, player_headshot, everything())
player_stats
player_stats
str(player_stats)
attr(player_stats)
attributes(player_stats)
attr(player_stats, 'names')
str(player_stats)
tags$img
bs_theme
remotes::install_github("rstudio/bslib")
install.packages('rmarkdown')
install.packages('rmarkdown')
install.packages("rmarkdown")
install.packages("rmarkdown")
